// Copyright 2022 TriggerMesh Inc.
// SPDX-License-Identifier: Apache-2.0
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/triggermesh/triggermesh-core/pkg/apis/eventing/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RedisReplayLister helps list RedisReplays.
// All objects returned here must be treated as read-only.
type RedisReplayLister interface {
	// List lists all RedisReplays in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RedisReplay, err error)
	// RedisReplays returns an object that can list and get RedisReplays.
	RedisReplays(namespace string) RedisReplayNamespaceLister
	RedisReplayListerExpansion
}

// redisReplayLister implements the RedisReplayLister interface.
type redisReplayLister struct {
	indexer cache.Indexer
}

// NewRedisReplayLister returns a new RedisReplayLister.
func NewRedisReplayLister(indexer cache.Indexer) RedisReplayLister {
	return &redisReplayLister{indexer: indexer}
}

// List lists all RedisReplays in the indexer.
func (s *redisReplayLister) List(selector labels.Selector) (ret []*v1alpha1.RedisReplay, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RedisReplay))
	})
	return ret, err
}

// RedisReplays returns an object that can list and get RedisReplays.
func (s *redisReplayLister) RedisReplays(namespace string) RedisReplayNamespaceLister {
	return redisReplayNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RedisReplayNamespaceLister helps list and get RedisReplays.
// All objects returned here must be treated as read-only.
type RedisReplayNamespaceLister interface {
	// List lists all RedisReplays in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RedisReplay, err error)
	// Get retrieves the RedisReplay from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.RedisReplay, error)
	RedisReplayNamespaceListerExpansion
}

// redisReplayNamespaceLister implements the RedisReplayNamespaceLister
// interface.
type redisReplayNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RedisReplays in the indexer for a given namespace.
func (s redisReplayNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.RedisReplay, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RedisReplay))
	})
	return ret, err
}

// Get retrieves the RedisReplay from the indexer for a given namespace and name.
func (s redisReplayNamespaceLister) Get(name string) (*v1alpha1.RedisReplay, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("redisreplay"), name)
	}
	return obj.(*v1alpha1.RedisReplay), nil
}
