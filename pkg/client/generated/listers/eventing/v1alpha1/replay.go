// Copyright 2022 TriggerMesh Inc.
// SPDX-License-Identifier: Apache-2.0
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/triggermesh/triggermesh-core/pkg/apis/eventing/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ReplayLister helps list Replays.
// All objects returned here must be treated as read-only.
type ReplayLister interface {
	// List lists all Replays in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Replay, err error)
	// Replays returns an object that can list and get Replays.
	Replays(namespace string) ReplayNamespaceLister
	ReplayListerExpansion
}

// replayLister implements the ReplayLister interface.
type replayLister struct {
	indexer cache.Indexer
}

// NewReplayLister returns a new ReplayLister.
func NewReplayLister(indexer cache.Indexer) ReplayLister {
	return &replayLister{indexer: indexer}
}

// List lists all Replays in the indexer.
func (s *replayLister) List(selector labels.Selector) (ret []*v1alpha1.Replay, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Replay))
	})
	return ret, err
}

// Replays returns an object that can list and get Replays.
func (s *replayLister) Replays(namespace string) ReplayNamespaceLister {
	return replayNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ReplayNamespaceLister helps list and get Replays.
// All objects returned here must be treated as read-only.
type ReplayNamespaceLister interface {
	// List lists all Replays in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Replay, err error)
	// Get retrieves the Replay from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Replay, error)
	ReplayNamespaceListerExpansion
}

// replayNamespaceLister implements the ReplayNamespaceLister
// interface.
type replayNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Replays in the indexer for a given namespace.
func (s replayNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Replay, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Replay))
	})
	return ret, err
}

// Get retrieves the Replay from the indexer for a given namespace and name.
func (s replayNamespaceLister) Get(name string) (*v1alpha1.Replay, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("replay"), name)
	}
	return obj.(*v1alpha1.Replay), nil
}
